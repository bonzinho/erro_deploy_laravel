<?php

namespace App\Repositories;

use App\Entities\Holidays;
use App\Events\AfterCancelTaskAllocateEvent;
use App\Events\AfterTaskAllocateEvent;
use Carbon\Carbon;
use Mockery\Exception;
use Prettus\Repository\Eloquent\BaseRepository;
use Prettus\Repository\Criteria\RequestCriteria;
use App\Repositories\TaskRepository;
use App\Entities\Task;
use App\Validators\TaskValidator;

/**
 * Class TaskRepositoryEloquent
 * @package namespace App\Repositories;
 */
class TaskRepositoryEloquent extends BaseRepository implements TaskRepository
{
    /**
     * Specify Model class name
     *
     * @return string
     */
    public function model()
    {
        return Task::class;
    }

    public function create(array $attributes)
    {
        $attributes['date'] = Carbon::parse($attributes['date'])->format('Y-m-d');
        return parent::create($attributes); // TODO: Change the autogenerated stub
    }

    public function allocate(array $attributes){
        $returnArray = [];
        for($x = 0; $x < count($attributes['collaborator_id']); $x++){
            $collaborator = $this->find($attributes['task_id'])->collaborators()->wherePivot('collaborator_id',$attributes['collaborator_id'][$x])->first();
            if($collaborator->pivot->allocation == true){
                continue;
            }
            //verifica se o id do colaborador existe no array dos id selecionado se existir alloca, se não existir não aloca;
            if(in_array($attributes['collaborator_id'][$x], $attributes['select'])){
                $update = ['allocation' => true];
                $pushArray = [
                    'collaborator_id' => $attributes['collaborator_id'][$x],
                ];
                array_push($returnArray, $pushArray);

                try{
                    $this->find($attributes['task_id'])->collaborators()->updateExistingPivot([$attributes['collaborator_id'][$x]], $update, false);
                    $event = new AfterTaskAllocateEvent($collaborator);
                    event($event);
                }catch (Exception $exception){
                    return $exception->getMessage();
                }
            }
        }
        return $returnArray;
    }

    public function deallocate(array $attributes){
        $returnArray = [];
        for($x = 0; $x < count($attributes['collaborator_id']); $x++){
            $collaborator = $this->find($attributes['task_id'])->collaborators()->wherePivot('collaborator_id',$attributes['collaborator_id'][$x])->first();
            if($collaborator->pivot->allocation == false){
                continue;
            }
            //verifica se o id do colaborador existe no array dos id selecionado se existir alloca, se não existir não aloca;
            if(in_array($attributes['collaborator_id'][$x], $attributes['select'])){
                $update = ['allocation' => false];
                $pushArray = [
                    'collaborator_id' => $attributes['collaborator_id'][$x],
                ];
                array_push($returnArray, $pushArray);

                try{
                    $this->find($attributes['task_id'])->collaborators()->updateExistingPivot([$attributes['collaborator_id'][$x]], $update, false);
                    $event = new AfterCancelTaskAllocateEvent($collaborator);
                    event($event);
                }catch (Exception $exception){
                    return $exception->getMessage();
                }
            }
        }
        return $returnArray;
    }




    public function validate_schedule(array $attributes){

        $task = $this->find($attributes['task_id']);

        $taskDate = Carbon::parse($task->date);
        $weekend = $taskDate->isWeekend();

        $month = $this->verifyMonth(Carbon::parse($taskDate)->format('m'));
        $day = Carbon::parse($taskDate)->format('d');
        $year = Carbon::parse($taskDate)->format('Y');
        $hollidays = Holidays::all()->where('id', $year)->pluck($month);
        $arrayHolidays = explode(';', $hollidays[0]); // verifica se o dia datarefa calha num feriado
        $isHolliday = in_array($day, $arrayHolidays); // bool para ver se é feriado

        $horaInicialTarefa = $attributes['init_time_correction'];
        $horaFinalTarefa = $attributes['end_time_correction'];

        if($weekend || $isHolliday){
            $init = new Carbon($horaInicialTarefa);
            $end = new Carbon($horaFinalTarefa);
            $horasExtras = $init->diffInMinutes($end) / 60; //NUMERO DE HORAS EXTRAS
            $horas = [
                'horaExtra' => $horasExtras,
                'horasNormais' => 0,
            ];
            $values = $this->calcHoursPrice($horas['horasNormais'], $horas['horaExtra']);
        }else{
            $horas = $this->getExtraHoursNumber($horaInicialTarefa, $horaFinalTarefa); //calcular numero de horas extras e normais
            $values = $this->calcHoursPrice($horas['horasNormais'], $horas['horaExtra']);
        }

        $collabTask = $task->collaborators()->wherePivot('collaborator_id', '=', $attributes['collaborator_id'])->first();

        $collabTask->pivot->init_time_correction = $horaInicialTarefa;
        $collabTask->pivot->end_time_correction = $horaFinalTarefa;
        $collabTask->pivot->total_extra_hour = $horas['horaExtra'];
        $collabTask->pivot->total_normal_hour = $horas['horasNormais'];
        $collabTask->pivot->normal_hour_value_total = $values['valorNormais'];
        $collabTask->pivot->extra_hour_value_total = $values['valorExtras'];
        $collabTask->pivot->validate_confirm_schedule = 1;

        return $collabTask->pivot->save($collabTask->toArray());
    }



    //obter o numero de horas extra entre um hórario
    private function getExtraHoursNumber($init, $end){
        $horarioNormal = explode("-", env('HORARIO')); //[0]->INICIO | [1] -> FIM
        $horarioNormal[0] = Carbon::parse($horarioNormal[0])->format('H:i');
        $horarioNormal[1] = Carbon::parse($horarioNormal[1])->format('H:i');
        $init = Carbon::parse($init)->format('H:i');
        $end = Carbon::parse($end)->format('H:i');

        $horasExtras = 0;
        $horasNormais = 0;
        //se a hora inicio for inferior à hora inicio normal de trabalho < 7:00 da manha
        if($init < $horarioNormal[0] & $end < $horarioNormal[0]){
            $init = new Carbon($init);
            $end = new Carbon($end);
            $horasExtras += $init->diffInMinutes($end) / 60; //NUMERO DE HORAS EXTRAS
        }elseif ($init < $horarioNormal[0] & $end <= $horarioNormal[1]){
            //horas  extras do init até às 7:00
            $init = new Carbon($init);
            $end = new Carbon($end);
            $horarioNormal[0] = new Carbon($horarioNormal[0]);
            $horasExtras += $init->diffInMinutes($horarioNormal[0]) / 60; //NUMERO DE HORAS EXTRAS
            $horasNormais += $horarioNormal[0]->diffInMinutes($end) / 60; //NUMERO DE HORAS NORMAIS

        }elseif($init >= $horarioNormal[1] && $end >= $horarioNormal[1]){ // se a hora inicio  e fim foam horas extras
            $time_init = new Carbon($init);
            $shift_end_time = new Carbon($end);
            $horasExtras += $time_init->diffInMinutes($shift_end_time) / 60; //NUMERO DE HORAS EXTRAS
        }elseif($init >= $horarioNormal[0] && $init <= $horarioNormal[1] && $end > $horarioNormal[1]){
            $init = new Carbon($init);
            $end = new Carbon($end);
            $horarioNormal[1] = new Carbon($horarioNormal[1]);
            $horasNormais += $init->diffInMinutes($horarioNormal[1]) / 60; //NUMERO DE HORAS EXTRAS
            $horasExtras += $horarioNormal[1]->diffInMinutes($end) / 60; //NUMERO DE HORAS NORMAIS
        }elseif($init < $horarioNormal[0] && $end > $horarioNormal[1]){

            $init = new Carbon($init);
            $end = new Carbon($end);
            $horarioNormal[0] = new Carbon($horarioNormal[0]);
            $horarioNormal[1] = new Carbon($horarioNormal[1]);

            $horasNormais += $horarioNormal[0]->diffInMinutes($horarioNormal[1]) / 60; //NUMERO DE HORAS EXTRAS
            $horasExtras += $init->diffInMinutes($horarioNormal[0]) / 60; //NUMERO DE HORAS NORMAIS
            $horasExtras += $horarioNormal[1]->diffInMinutes($end) / 60; //NUMERO DE HORAS NORMAIS
        }else{
            $init = new Carbon($init);
            $end = new Carbon($end);
            $horasNormais += $init->diffInMinutes($end) / 60; //NUMERO DE HORAS EXTRAS
        }
        $return = [
            'horaExtra' => $horasExtras,
            'horasNormais' => $horasNormais,
        ];
        return $return;
    }

    private function calcHoursPrice($normalHours, $extraHours = null){
        $valorHorasExtra = env('REMUNERACAO') * (env('HORAS-EXTRAS')/100) + env('REMUNERACAO');
        $valorHoraNormal = env('REMUNERACAO');
        $horasExtras = $extraHours * $valorHorasExtra;
        $horasNormais = $normalHours * $valorHoraNormal;
        $array = [
            'valorNormais' => $horasNormais,
            'valorExtras' => $horasExtras,
        ];
        return $array;
    }

    private function verifyMonth($month){
        switch ($month){
            case 1:
                return 'janeiro';
                break;
            case 2:
                return 'fevereiro';
                break;
            case 3:
                return 'marco';
                break;
            case 4:
                return 'abril';
                break;
            case 5:
                return 'maio';
                break;
            case 6:
                return 'junho';
                break;
            case 7:
                return 'julho';
                break;
            case 8:
                return 'agosto';
                break;
            case 9:
                return 'setembro';
                break;
            case 10:
                return 'outubro';
                break;
            case 11:
                return 'novembro';
                break;
            case 12:
                return 'dezembro';
                break;
        }
    }


    /**
    * Specify Validator class name
    *
    * @return mixed
    */
    public function validator()
    {

        return TaskValidator::class;
    }


    /**
     * Boot up the repository, pushing criteria
     */
    public function boot()
    {
        $this->pushCriteria(app(RequestCriteria::class));
    }
}
