<?php

namespace App\Repositories;

use Carbon\Carbon;
use Prettus\Repository\Eloquent\BaseRepository;
use Prettus\Repository\Criteria\RequestCriteria;
use App\Repositories\HolidaysRepository;
use App\Entities\Holidays;
use App\Validators\HolidaysValidator;

/**
 * Class HolidaysRepositoryEloquent
 * @package namespace App\Repositories;
 */
class HolidaysRepositoryEloquent extends BaseRepository implements HolidaysRepository
{
    /**
     * Specify Model class name
     *
     * @return string
     */
    public function model()
    {
        return Holidays::class;
    }

    /**
    * Specify Validator class name
    *
    * @return mixed
    */
    public function validator()
    {

        return HolidaysValidator::class;
    }

    public function create(array $attributes)
    {
        $year = Carbon::parse($attributes['dates'][0])->format('Y');
        $verify = $this->findWhere(['id' => $year])->count();

        if($verify > 0) return $verify;
        $update = [
            'id' => Carbon::now()->format('Y'),
            'janeiro' => null,
            'fevereiro' => null,
            'marco' => null,
            'abril' => null,
            'maio' => null,
            'junho' => null,
            'julho' => null,
            'agosto' => null,
            'setembro' => null,
            'outubro' => null,
            'novembro' => null,
            'dezembro' => null,
        ];
        for($x = 0; $x < count($attributes['dates']); $x++){
            $month = $this->verifyMonth(Carbon::parse($attributes['dates'][$x])->format('m')); // verifica qual o mêspara adicionar à base de dados
            $update[$month] = $this->addtoString($update[$month], Carbon::parse($attributes['dates'][$x])->format('d'));
        }
        return parent::create($update); // TODO: Change the autogenerated stub
    }

    // addiconar à string
    function addtoString($str, $item) {
        if(count($str) > 0){
            $parts = explode(';', $str);
            $parts[] = $item;
        }else{
            $parts[] = $item;
        }
        return implode(';', $parts);
    }


    private function verifyMonth($month){
        switch ($month){
            case 1:
                return 'janeiro';
                break;
            case 2:
                return 'fevereiro';
                break;
            case 3:
                return 'marco';
                break;
            case 4:
                return 'abril';
                break;
            case 5:
                return 'maio';
                break;
            case 6:
                return 'junho';
                break;
            case 7:
                return 'julho';
                break;
            case 8:
                return 'agosto';
                break;
            case 9:
                return 'setembro';
                break;
            case 10:
                return 'outubro';
                break;
            case 11:
                return 'novembro';
                break;
            case 12:
                return 'dezembro';
                break;
        }
    }


    /**
     * Boot up the repository, pushing criteria
     */
    public function boot()
    {
        $this->pushCriteria(app(RequestCriteria::class));
    }
}
